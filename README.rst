Thoth's TensorFlow stack guidance example
-----------------------------------------

**See different branches for different examples**

This is an example of an application which uses Thoth's recommendations to
recommend a TensorFlow stack for a specific hardware. The application is
showing one of the `Integration of Thoth
<https://pypi.org/project/thamos>`_ using Thamos CLI.  

For a video of the demo go `here <https://www.youtube.com/watch?v=mes9sDMPr28>`_.

For OpenShift s2i (Source-To-Image) examples, visit `thoth-station/s2i-example
<https://github.com/thoth-station/s2i-example>`__ repository.

Thamos CLI
==========

One of the integration for Thoth is `Thamos
<https://pypi.org/project/thamos>`_. You can use Thoth's recommendation engine
directly from within your terminal. First, you need to clone this repo and
install Thamos CLI:

.. code-block:: console

  git clone https://github.com/thoth-station/cli-example.git && cd cli-example
  pip3 install thamos
  thamos --help

The pre-configured template for Thamos CLI is available in the
``.thoth.yaml`` file:

.. code-block:: console

  cat .thoth.yaml

Alternatively, to generate Thoth's configuration file out of the template run the
following command:

.. code-block:: console

  thamos config --no-interactive --template thoth_conf_template.yaml
  cat .thoth.yaml  # to browse the content of the config file

Now you are ready to ask for advises:

.. code-block:: console

  thamos advise

This might take some time. Once Thoth recommends you the application stack to
be used for running the application, create a Python environment and install
requirements into it:

.. code-block:: console

  pip3 install micropipenv

In order to obtain requirement.txt, you can use the following command:

.. code-block:: console

  micropipenv requirements --no-dev

Finally install the requirements in your environment:

.. code-block:: console

  cat requirements.txt  # check requirements with digests
  python3 -m venv venv/ && . venv/bin/activate
  micropipenv install

And finally, run the application (the virtual environment needs to be still
activated):

.. code-block:: console

  python3 ./app.py

To browse Thoth's logs during or after the adviser run:

.. code-block:: console

  thamos log


Security
========

One of the options that can be set when getting advice is setting the :code:`recommendation_type`.  On Thoth's adviser
adviser this indicates different pipeline units (steps, sieves, etc.) that should be included when scoring packages.  By
setting :code:`recommendation_type == security` adviser will include steps such as checking for CVE and scoring based on
Thoth's security indicators.

The following were generated by :code:`>thamos advise`:

* **Pipfile.lock**

* **results.txt** is the output of the command

* **advise_logs.txt** is the result of running :code:`>thamos log` after advise

The most interesting information is held in **advise_logs.txt** there you can see different versions of flask and its
dependencies getting removed due to missing security information or when a CVE is detected.  The end result is a
software stack which is more secure due to the help of Thoth.
